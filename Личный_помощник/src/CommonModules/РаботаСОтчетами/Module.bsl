Процедура СформироватьОтчет(Знач СхемаКомпоновкиДанных, Настройки, ТабличныйДокумент)Экспорт
	
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	//Очищаем поле табличного документа
	ТабличныйДокумент.Очистить();
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
Конецпроцедуры

Процедура ЗаполнитьПараметрыДанных(Настройки, СтруктураЗаполнения)Экспорт
	
	Для Каждого Элемент Из Настройки.ПараметрыДанных.Элементы Цикл
		ПараметрСтрокой = Строка(Элемент.Параметр);
		Если СтруктураЗаполнения.Свойство(ПараметрСтрокой) Тогда
			Элемент.Значение = СтруктураЗаполнения[ПараметрСтрокой];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеОтборы(Настройки, СтруктураЗаполнения)Экспорт
	
	Для Каждого Элемент Из Настройки.Отбор.Элементы Цикл
		
		ОтборСтрокой = Строка(Элемент.ЛевоеЗначение);
		Если СтруктураЗаполнения.Свойство(ОтборСтрокой) Тогда
			
			ЗначениеОтбора = СтруктураЗаполнения[ОтборСтрокой];
			Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
				Элемент.ПравоеЗначение = ЗначениеОтбора;
				Элемент.Использование = Истина;
			Иначе
				Элемент.Использование = Ложь;
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры


